name: Domain Check and Update

on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check-and-update-domain:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: pip install requests

    - name: Smart Domain Check and Update
      env:
        FALLBACK_DOMAIN_NUMBER: 1423
      run: |
        # Mevcut domaini al veya varsayılanı kullan
        if [ -f "domain.txt" ]; then
          CURRENT_DOMAIN=$(grep -o 'guncel_domain=.*' domain.txt | cut -d'=' -f2)
          echo "Mevcut domain: $CURRENT_DOMAIN"
        else
          CURRENT_DOMAIN="https://trgoals${FALLBACK_DOMAIN_NUMBER}.xyz/"
          echo "Yeni domain.txt oluşturuluyor: $CURRENT_DOMAIN"
          echo "guncel_domain=$CURRENT_DOMAIN" > domain.txt
        fi

        # Domain numarasını al
        DOMAIN_NUMBER=$(echo "$CURRENT_DOMAIN" | grep -o '[0-9]\+')
        if [ -z "$DOMAIN_NUMBER" ]; then
          DOMAIN_NUMBER=$FALLBACK_DOMAIN_NUMBER
          echo "Domain numarası bulunamadı, varsayılan ($DOMAIN_NUMBER) kullanılacak."
        fi

        echo "Başlangıç domain numarası: $DOMAIN_NUMBER"

        # Python scriptini environment değişkenle çağır
        DOMAIN_NUMBER="$DOMAIN_NUMBER" python3 - <<PYCODE
import os, requests, sys

headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36'}

def check_domain(domain):
    try:
        r = requests.get(domain, timeout=10, allow_redirects=True, headers=headers)
        print(f"{domain} -> {r.status_code}")
        return r.status_code == 200
    except Exception as e:
        print(f"{domain} -> hata: {e}")
        return False

try:
    start_num = int(os.environ.get("DOMAIN_NUMBER", "1423"))
except:
    start_num = 1423

print(f"Başlangıç domain numarası: {start_num}")

latest = None
for i in range(15):
    d = f"https://trgoals{start_num + i}.xyz/"
    if check_domain(d):
        latest = d

if latest:
    base_num = int(latest.split("trgoals")[1].split(".xyz")[0])
    selected = latest
    for j in range(1, 4):
        next_d = f"https://trgoals{base_num + j}.xyz/"
        if check_domain(next_d):
            selected = next_d
        else:
            break
else:
    selected = f"https://trgoals{start_num}.xyz/"

with open("domain.txt", "w") as f:
    f.write(f"guncel_domain={selected}\n")

print(f"Seçilen domain: {selected}")
sys.exit(0)
PYCODE

    - name: Commit and push changes
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git add domain.txt

        if git diff --staged --quiet; then
          echo "Değişiklik yok, commit atlanıyor."
        else
          git commit -m "Güncel domain: $(date '+%Y-%m-%d %H:%M:%S')"
          git push
          echo "Değişiklikler push edildi."
        fi
